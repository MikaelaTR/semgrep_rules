rules:
  - id: use-after-free
    metadata:
      author: Victor 4ernyak <https://t.me/iter_malum>
      confidence: LOW
      category: security
      cwe:
        - "CWE-416: Use After Free"
      vulnerability_class:
        - Memory Issues  
      references:
          - https://learn.snyk.io/lesson/use-after-free/
          - https://cwe.mitre.org/data/definitions/416.html
          - https://github.com/struct/mms
          - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
          - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    languages:
      - c
      - c++
    severity: INFO
    message: >- 
       UAF bugs occur when a program continues to access a memory location after the memory has been freed or deallocated.
       This can lead to unexpected behavior, crashes or even security vulnerabilities such as remote code execution or privilege escalation.
       UAF bugs can be particularly difficult to detect and fix because they often do not result in visible errors right away.
       A vulnerable application can continue to function just fine in certain scenarios, making it seem like there is no bug.
       Meanwhile, data could get corrupted, or worse, attackers could leak or purposely alter data.
    patterns:
      - pattern-either:
          - pattern: $FUNC(..., <... $VAR ...>, ...)
          - pattern: $FUNC(..., <... $VAR->$ACCESSOR ...>, ...)
          - pattern: $FUNC(..., <... (*$VAR).$ACCESSOR ...>, ...)
          - pattern: $FUNC(..., <... $VAR[$NUM] ...>, ...)
      - pattern-inside: free($VAR); ...
      - pattern-not-inside: free($VAR); ... $VAR = NULL; ...
      - pattern-not-inside: free($VAR); ... $VAR = malloc(...); ...
      - metavariable-regex:
          metavariable: $FUNC
          regex: (?!^free$)
      - pattern-either:
        - pattern: $PTR->$MEM
        - pattern: $PTR[$POS]
        - pattern: (*$PTR)
        - pattern: return $PTR;
      - pattern-either:
        - pattern: $FUN(..., <... $PTR ...>, ...)
        - pattern: $FUN(..., <... $PTR->$MEM ...>, ...)
        - pattern: $FUN(..., <... $PTR[$POS] ...>, ...)
        - pattern: $FUN(..., <... (*$PTR) ...>, ...)
        - pattern: $PTR->$FUN(...)
      - pattern-either:
          - pattern: $VAR->$ACCESSOR
          - pattern: (*$VAR).$ACCESSOR
          - pattern: $VAR[$NUM]
      - pattern-inside: free($VAR); ...
      - pattern-not-inside: $VAR = NULL; ...
      - pattern-not-inside: free($VAR); ... $VAR = malloc(...); ...