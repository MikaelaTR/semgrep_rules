rules:
  - id: info-leak-and-formated-string
    message: >-  
      The Format String exploit occurs when the submitted data of an input string is evaluated as a command by the application.
      In this way, the attacker could execute code, read the stack, or cause a segmentation fault in the running application, causing new behaviors that could compromise the security or the stability of the system.
      The attack could be executed when the application doesnâ€™t properly validate the submitted input. In this case, if a Format String parameter, like %x, is inserted into the posted data, the string is parsed by the Format Function, and the conversion specified in the parameters is executed.
      However, the Format Function is expecting more arguments as input, and if these arguments are not supplied, the function could read or write the stack.
    metadata:
      author: Victor 4ernyak <https://t.me/iter_malum>
      cwe:
        - "CWE-134: Use of Externally-Controlled Format String"
      references:
        - https://owasp.org/www-community/attacks/Format_string_attack
        - http://nebelwelt.net/files/13PPREW.pdf
        - https://cwe.mitre.org/data/definitions/134
        - https://julianor.tripod.com/bc/formatstring-1.2.pdf
        - http://phrack.org/issues/70/13.html#article
        - https://g.co/kgs/PCHQjJ
        - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
      category: security
      confidence: LOW
      owasp:
        - A09:2021 - Security Logging and Monitoring Failures
      subcategory:
        - audit
      likelihood: LOW
      impact: MEDIUM
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - c
      - c++
    severity: LOW
    pattern-either:
      # format string in 1st arg
      - patterns:
        - pattern-either:
          # printf family
          - pattern: printf(...)
          - pattern: vprintf(...)
          - pattern: wprintf(...)
          - pattern: vwprintf(...)
          - pattern: vcprintf(...)
          - pattern: vcwprintf(...)
          - pattern: vscprintf(...)
          - pattern: vscwprintf(...)
          - pattern: printk(...)
          # scanf family
          - pattern: scanf(...)
          - pattern: vscanf(...)
          - pattern: wscanf(...)
          - pattern: vwscanf(...)
          # err/warn family
          - pattern: warn(...)
          - pattern: vwarn(...)
          - pattern: warnx(...)
          - pattern: vwarnx(...)
        - pattern-not: $FUN("...", ...)
      # format string in 2nd arg
      - patterns:
        - pattern-either:
          # printf family
          - pattern: fprintf(...)
          - pattern: vfprintf(...)
          - pattern: fwprintf(...)
          - pattern: vfwprintf(...)
          - pattern: sprintf(...)
          - pattern: vsprintf(...)
          - pattern: asprintf(...)
          - pattern: vasprintf(...)
          - pattern: dprintf(...)
          - pattern: vdprintf(...)
          - pattern: wsprintf(...)
          # scanf family
          - pattern: fscanf(...)
          - pattern: vfscanf(...)
          - pattern: fwscanf(...)
          - pattern: vfwscanf(...)
          - pattern: sscanf(...)
          - pattern: vsscanf(...)
          - pattern: swscanf(...)
          - pattern: vswscanf(...)
          # syslog family
          - pattern: syslog(...)
          - pattern: vsyslog(...)
          # err/warn family
          - pattern: err(...)
          - pattern: verr(...)
          - pattern: errx(...)
          - pattern: verrx(...)
          - pattern: warnc(...)
          - pattern: vwarnc(...)
        - pattern-not: $FUN($ARG1, "...", ...)
      # format string in 3rd arg
      - patterns:
        - pattern-either:
          # printf family
          - pattern: snprintf(...)
          - pattern: vsnprintf(...)
          - pattern: swprintf(...)
          - pattern: vswprintf(...)
          # err/warn family
          - pattern: errc(...)
          - pattern: verrc(...)
        - pattern-not: $FUN($ARG1, $ARG2, "...", ...)
      - patterns:
        - pattern-either:
            - pattern: |
                $FUNC($BUFFER, argv[$NUM], ...);
                ...
                vsprintf(..., $BUFFER, ...);
            - pattern: vsprintf(..., argv[$NUM], ...)
            - pattern: |
                $FUNC($BUFFER, argv[$NUM], ...);
                ...
                sprintf(..., $BUFFER, ...);
            - pattern: sprintf(...,argv[$NUM],...)
            - pattern: |
                $FUNC($BUFFER, argv[$NUM], ...);
                ...
                printf(..., $BUFFER, ...);
            - pattern: printf(...,argv[$NUM],...)
        - metavariable-comparison:
            metavariable: $NUM
            comparison: int($NUM) > 0