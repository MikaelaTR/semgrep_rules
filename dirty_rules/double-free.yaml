rules:
  - id: double-free
    metadata:
      author: Victor 4ernyak <https://t.me/iter_malum>
      confidence: MEDIUM
      category: security
      cwe:
        - "CWE-415: Double Free"
      vulnerability_class:
        - Memory Issues  
      references:
          - https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory
          - https://wiki.sei.cmu.edu/confluence/display/c/MEM30-C.+Do+not+access+freed+memory
          - https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM50-CPP.+Do+not+access+freed+memory
          - https://cwe.mitre.org/data/definitions/415
          - https://github.com/struct/mms
          - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
          - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
          - https://dustri.org/b/playing-with-weggli.html
    message: >- 
      The program calls free() twice for the same memory address, which may result in modification of unintended sections of memory.
      Calling free() twice with the same argument corrupts the program's memory management data structures.
      This can cause the program to crash or cause subsequent calls to malloc() to return the same pointer.
      If malloc() returns the same value twice, an attacker can cause a buffer overflow by writing data to double-allocated memory.
      Recommendations:
      Ensure that allocated memory is freed only once.
      After freeing a block, set the pointer to NULL to prevent it from being freed again.
      For complex error cases, ensure that the memory state (allocation) is handled correctly during cleanup operations.
      For object-oriented languages, ensure that the object destructor erases each block of memory only once.
    languages:
      - c
      - c++
    severity: ERROR
    pattern-either:
    - patterns:
      - pattern: |
          free($PTR);
          ...
          free($PTR);
      - pattern-not: |-
          free($PTR);
          return ...;
          ...
          free($PTR);
      - pattern-not: |
          free($PTR);
          ...
          $PTR = $EXPR;
          ...
          free($PTR);
      - pattern-not-inside: |
          $FTYPE $FUNC(..., $TYPE $ARG, ...){
          ...
          $ARG = $EXPR;
          ...
          }
          ...
          $FUNC($PTR);
    - patterns:
      - pattern: |
          if ($COND){
          ...
          free($PTR);
          ...
          }
          ...
          free($PTR);
      - pattern-not: |
          if ($COND){
          ...
          free($PTR);
          ...
          $PTR = $EXPR;
          ...
          }
          ...
          free($PTR);
      - pattern-not: |
          if ($COND){
          ...
          free($PTR);
          return ...;
          ...
          }
          ...
          free($PTR);
      - pattern-not: |
          if ($COND){
          ...
          free($PTR);
          ...
          }
          ...
          $PTR = $EXPR;
          ...
          free($PTR);
    - patterns:
      - pattern-inside: |
          $FTYPE $FUNC(..., $TYPE $ARG, ...){
          ...
          free($ARG);
          ...
          }
      - pattern-not-inside: |
          $FTYPE $FUNC(..., $TYPE $ARG, ...){
          ...
          free($ARG);
          ...
          $ARG = $EXPR;
          ...
          }
      - pattern: |
          $FUNC(..., $PTR, ...);
          ...
          $FUNC(..., $PTR, ...);
      - pattern-not: |
          $FUNC(..., $PTR, ...);
          ...
          $PTR = $EXPR;
          ...
          $FUNC(..., $PTR, ...);
    - patterns:
      - pattern: |
          delete [] $PTR;
          ...
          delete [] $PTR;
      - pattern-not: |
          delete [] $PTR;
          ...
          $PTR = $EXPR;
          ...
          delete [] $PTR;
    - patterns:
      - pattern: |
          delete $PTR;
          ...
          delete $PTR;
      - pattern-not: |
          delete $PTR;
          ...
          $PTR = $EXPR;
          ...
          delete $PTR;
    - patterns:
      - pattern-not: |-
          free($VAR);
          ...
          $VAR = NULL;
          ...
          free($VAR);
      - pattern-not: |-
          free($VAR);
          ...
          $VAR = $LABEL;
          ...
          free($VAR);
      - pattern-not: |-
          free($VAR);
          ...
          $VAR = malloc(...);
          ...
          free($VAR);
      - pattern-not: |-
          free($VAR);
          return ...;
          ...
          free($VAR);
      - pattern-inside: |-
          free($VAR);
          ...
          free($VAR);
      - pattern-not: |-
          free($VAR);
          goto $LABEL;
          ...
          free($VAR);
      - pattern-not: |
          if ($COND){
          ...
          free($VAR);
          goto $LABEL;
          ...
          }
          ...
          free($PTR);

      - metavariable-pattern:
          metavariable: $FREE
          pattern: free
      - focus-metavariable: $FREE